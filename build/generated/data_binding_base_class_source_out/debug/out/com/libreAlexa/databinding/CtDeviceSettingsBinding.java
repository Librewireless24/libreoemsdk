// Generated by view binder compiler. Do not edit!
package com.libreAlexa.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.SwitchCompat;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.libreAlexa.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CtDeviceSettingsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appbarLayout;

  @NonNull
  public final ProgressBar audioProgressBar;

  @NonNull
  public final ImageButton btnEditSpeakerName;

  @NonNull
  public final AppCompatButton btnForgetNetwork;

  @NonNull
  public final ProgressBar chromecastLoginProgressBar;

  @NonNull
  public final FrameLayout flChromecastSettings;

  @NonNull
  public final ProgressBar hostFirmwareProgressBar;

  @NonNull
  public final AppCompatImageView ivBack;

  @NonNull
  public final FrameLayout layIssuesReport;

  @NonNull
  public final FrameLayout layTimeZone;

  @NonNull
  public final LinearLayout llAlexaSettings;

  @NonNull
  public final LinearLayout llChromecastSettings;

  @NonNull
  public final LinearLayout llIssuesReport;

  @NonNull
  public final LinearLayout llSoftUpdate;

  @NonNull
  public final LinearLayout llTopChromecastSettings;

  @NonNull
  public final LinearLayout llTunnelingControls;

  @NonNull
  public final ProgressBar localeProgressBar;

  @NonNull
  public final ProgressBar loginProgressBar;

  @NonNull
  public final AppCompatSeekBar seekBarBass;

  @NonNull
  public final AppCompatSeekBar seekBarTreble;

  @NonNull
  public final AppCompatSeekBar seekBarVolume;

  @NonNull
  public final ProgressBar softUpdateProgressBar;

  @NonNull
  public final LinearLayout speechVolume;

  @NonNull
  public final SwitchCompat switchSpeechVolumeFollow;

  @NonNull
  public final ProgressBar systemFirmwareProgressBar;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final AppCompatTextView tvAlexaLocale;

  @NonNull
  public final AppCompatTextView tvAmazonLogin;

  @NonNull
  public final AppCompatTextView tvAudioOutput;

  @NonNull
  public final AppCompatTextView tvBassValue;

  @NonNull
  public final AppCompatTextView tvChromecastStatus;

  @NonNull
  public final TextView tvDeviceName;

  @NonNull
  public final AppCompatTextView tvHostFirmware;

  @NonNull
  public final AppCompatTextView tvIpAddress;

  @NonNull
  public final AppCompatTextView tvMacAddress;

  @NonNull
  public final AppCompatTextView tvSoftUpdate;

  @NonNull
  public final AppCompatTextView tvSwitchStatus;

  @NonNull
  public final AppCompatTextView tvSystemFirmware;

  @NonNull
  public final AppCompatTextView tvToolbarTitle;

  @NonNull
  public final AppCompatTextView tvTrebleValue;

  @NonNull
  public final AppCompatTextView tvVolumeValue;

  @NonNull
  public final AppCompatTextView txtTimeZone;

  private CtDeviceSettingsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appbarLayout, @NonNull ProgressBar audioProgressBar,
      @NonNull ImageButton btnEditSpeakerName, @NonNull AppCompatButton btnForgetNetwork,
      @NonNull ProgressBar chromecastLoginProgressBar, @NonNull FrameLayout flChromecastSettings,
      @NonNull ProgressBar hostFirmwareProgressBar, @NonNull AppCompatImageView ivBack,
      @NonNull FrameLayout layIssuesReport, @NonNull FrameLayout layTimeZone,
      @NonNull LinearLayout llAlexaSettings, @NonNull LinearLayout llChromecastSettings,
      @NonNull LinearLayout llIssuesReport, @NonNull LinearLayout llSoftUpdate,
      @NonNull LinearLayout llTopChromecastSettings, @NonNull LinearLayout llTunnelingControls,
      @NonNull ProgressBar localeProgressBar, @NonNull ProgressBar loginProgressBar,
      @NonNull AppCompatSeekBar seekBarBass, @NonNull AppCompatSeekBar seekBarTreble,
      @NonNull AppCompatSeekBar seekBarVolume, @NonNull ProgressBar softUpdateProgressBar,
      @NonNull LinearLayout speechVolume, @NonNull SwitchCompat switchSpeechVolumeFollow,
      @NonNull ProgressBar systemFirmwareProgressBar, @NonNull Toolbar toolbar,
      @NonNull AppCompatTextView tvAlexaLocale, @NonNull AppCompatTextView tvAmazonLogin,
      @NonNull AppCompatTextView tvAudioOutput, @NonNull AppCompatTextView tvBassValue,
      @NonNull AppCompatTextView tvChromecastStatus, @NonNull TextView tvDeviceName,
      @NonNull AppCompatTextView tvHostFirmware, @NonNull AppCompatTextView tvIpAddress,
      @NonNull AppCompatTextView tvMacAddress, @NonNull AppCompatTextView tvSoftUpdate,
      @NonNull AppCompatTextView tvSwitchStatus, @NonNull AppCompatTextView tvSystemFirmware,
      @NonNull AppCompatTextView tvToolbarTitle, @NonNull AppCompatTextView tvTrebleValue,
      @NonNull AppCompatTextView tvVolumeValue, @NonNull AppCompatTextView txtTimeZone) {
    this.rootView = rootView;
    this.appbarLayout = appbarLayout;
    this.audioProgressBar = audioProgressBar;
    this.btnEditSpeakerName = btnEditSpeakerName;
    this.btnForgetNetwork = btnForgetNetwork;
    this.chromecastLoginProgressBar = chromecastLoginProgressBar;
    this.flChromecastSettings = flChromecastSettings;
    this.hostFirmwareProgressBar = hostFirmwareProgressBar;
    this.ivBack = ivBack;
    this.layIssuesReport = layIssuesReport;
    this.layTimeZone = layTimeZone;
    this.llAlexaSettings = llAlexaSettings;
    this.llChromecastSettings = llChromecastSettings;
    this.llIssuesReport = llIssuesReport;
    this.llSoftUpdate = llSoftUpdate;
    this.llTopChromecastSettings = llTopChromecastSettings;
    this.llTunnelingControls = llTunnelingControls;
    this.localeProgressBar = localeProgressBar;
    this.loginProgressBar = loginProgressBar;
    this.seekBarBass = seekBarBass;
    this.seekBarTreble = seekBarTreble;
    this.seekBarVolume = seekBarVolume;
    this.softUpdateProgressBar = softUpdateProgressBar;
    this.speechVolume = speechVolume;
    this.switchSpeechVolumeFollow = switchSpeechVolumeFollow;
    this.systemFirmwareProgressBar = systemFirmwareProgressBar;
    this.toolbar = toolbar;
    this.tvAlexaLocale = tvAlexaLocale;
    this.tvAmazonLogin = tvAmazonLogin;
    this.tvAudioOutput = tvAudioOutput;
    this.tvBassValue = tvBassValue;
    this.tvChromecastStatus = tvChromecastStatus;
    this.tvDeviceName = tvDeviceName;
    this.tvHostFirmware = tvHostFirmware;
    this.tvIpAddress = tvIpAddress;
    this.tvMacAddress = tvMacAddress;
    this.tvSoftUpdate = tvSoftUpdate;
    this.tvSwitchStatus = tvSwitchStatus;
    this.tvSystemFirmware = tvSystemFirmware;
    this.tvToolbarTitle = tvToolbarTitle;
    this.tvTrebleValue = tvTrebleValue;
    this.tvVolumeValue = tvVolumeValue;
    this.txtTimeZone = txtTimeZone;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CtDeviceSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CtDeviceSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.ct_device_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CtDeviceSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appbarLayout;
      AppBarLayout appbarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appbarLayout == null) {
        break missingId;
      }

      id = R.id.audio_progress_bar;
      ProgressBar audioProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (audioProgressBar == null) {
        break missingId;
      }

      id = R.id.btn_edit_speakerName;
      ImageButton btnEditSpeakerName = ViewBindings.findChildViewById(rootView, id);
      if (btnEditSpeakerName == null) {
        break missingId;
      }

      id = R.id.btn_forget_network;
      AppCompatButton btnForgetNetwork = ViewBindings.findChildViewById(rootView, id);
      if (btnForgetNetwork == null) {
        break missingId;
      }

      id = R.id.chromecast_login_progress_bar;
      ProgressBar chromecastLoginProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (chromecastLoginProgressBar == null) {
        break missingId;
      }

      id = R.id.fl_chromecast_settings;
      FrameLayout flChromecastSettings = ViewBindings.findChildViewById(rootView, id);
      if (flChromecastSettings == null) {
        break missingId;
      }

      id = R.id.host_firmware_progress_bar;
      ProgressBar hostFirmwareProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (hostFirmwareProgressBar == null) {
        break missingId;
      }

      id = R.id.iv_back;
      AppCompatImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.lay_issuesReport;
      FrameLayout layIssuesReport = ViewBindings.findChildViewById(rootView, id);
      if (layIssuesReport == null) {
        break missingId;
      }

      id = R.id.lay_timeZone;
      FrameLayout layTimeZone = ViewBindings.findChildViewById(rootView, id);
      if (layTimeZone == null) {
        break missingId;
      }

      id = R.id.ll_alexa_settings;
      LinearLayout llAlexaSettings = ViewBindings.findChildViewById(rootView, id);
      if (llAlexaSettings == null) {
        break missingId;
      }

      id = R.id.ll_chromecast_settings;
      LinearLayout llChromecastSettings = ViewBindings.findChildViewById(rootView, id);
      if (llChromecastSettings == null) {
        break missingId;
      }

      id = R.id.ll_issues_report;
      LinearLayout llIssuesReport = ViewBindings.findChildViewById(rootView, id);
      if (llIssuesReport == null) {
        break missingId;
      }

      id = R.id.ll_soft_update;
      LinearLayout llSoftUpdate = ViewBindings.findChildViewById(rootView, id);
      if (llSoftUpdate == null) {
        break missingId;
      }

      id = R.id.ll_top_chromecast_settings;
      LinearLayout llTopChromecastSettings = ViewBindings.findChildViewById(rootView, id);
      if (llTopChromecastSettings == null) {
        break missingId;
      }

      id = R.id.ll_tunneling_controls;
      LinearLayout llTunnelingControls = ViewBindings.findChildViewById(rootView, id);
      if (llTunnelingControls == null) {
        break missingId;
      }

      id = R.id.locale_progress_bar;
      ProgressBar localeProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (localeProgressBar == null) {
        break missingId;
      }

      id = R.id.login_progress_bar;
      ProgressBar loginProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (loginProgressBar == null) {
        break missingId;
      }

      id = R.id.seek_bar_bass;
      AppCompatSeekBar seekBarBass = ViewBindings.findChildViewById(rootView, id);
      if (seekBarBass == null) {
        break missingId;
      }

      id = R.id.seek_bar_treble;
      AppCompatSeekBar seekBarTreble = ViewBindings.findChildViewById(rootView, id);
      if (seekBarTreble == null) {
        break missingId;
      }

      id = R.id.seek_bar_volume;
      AppCompatSeekBar seekBarVolume = ViewBindings.findChildViewById(rootView, id);
      if (seekBarVolume == null) {
        break missingId;
      }

      id = R.id.soft_update_progress_bar;
      ProgressBar softUpdateProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (softUpdateProgressBar == null) {
        break missingId;
      }

      id = R.id.speechVolume;
      LinearLayout speechVolume = ViewBindings.findChildViewById(rootView, id);
      if (speechVolume == null) {
        break missingId;
      }

      id = R.id.switch_speech_volume_follow;
      SwitchCompat switchSpeechVolumeFollow = ViewBindings.findChildViewById(rootView, id);
      if (switchSpeechVolumeFollow == null) {
        break missingId;
      }

      id = R.id.system_firmware_progress_bar;
      ProgressBar systemFirmwareProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (systemFirmwareProgressBar == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tv_alexa_locale;
      AppCompatTextView tvAlexaLocale = ViewBindings.findChildViewById(rootView, id);
      if (tvAlexaLocale == null) {
        break missingId;
      }

      id = R.id.tv_amazon_login;
      AppCompatTextView tvAmazonLogin = ViewBindings.findChildViewById(rootView, id);
      if (tvAmazonLogin == null) {
        break missingId;
      }

      id = R.id.tv_audio_output;
      AppCompatTextView tvAudioOutput = ViewBindings.findChildViewById(rootView, id);
      if (tvAudioOutput == null) {
        break missingId;
      }

      id = R.id.tv_bass_value;
      AppCompatTextView tvBassValue = ViewBindings.findChildViewById(rootView, id);
      if (tvBassValue == null) {
        break missingId;
      }

      id = R.id.tv_chromecast_status;
      AppCompatTextView tvChromecastStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvChromecastStatus == null) {
        break missingId;
      }

      id = R.id.tv_device_name;
      TextView tvDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceName == null) {
        break missingId;
      }

      id = R.id.tv_host_firmware;
      AppCompatTextView tvHostFirmware = ViewBindings.findChildViewById(rootView, id);
      if (tvHostFirmware == null) {
        break missingId;
      }

      id = R.id.tv_ip_address;
      AppCompatTextView tvIpAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvIpAddress == null) {
        break missingId;
      }

      id = R.id.tv_mac_address;
      AppCompatTextView tvMacAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvMacAddress == null) {
        break missingId;
      }

      id = R.id.tv_soft_update;
      AppCompatTextView tvSoftUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvSoftUpdate == null) {
        break missingId;
      }

      id = R.id.tv_switch_status;
      AppCompatTextView tvSwitchStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvSwitchStatus == null) {
        break missingId;
      }

      id = R.id.tv_system_firmware;
      AppCompatTextView tvSystemFirmware = ViewBindings.findChildViewById(rootView, id);
      if (tvSystemFirmware == null) {
        break missingId;
      }

      id = R.id.tv_toolbar_title;
      AppCompatTextView tvToolbarTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvToolbarTitle == null) {
        break missingId;
      }

      id = R.id.tv_treble_value;
      AppCompatTextView tvTrebleValue = ViewBindings.findChildViewById(rootView, id);
      if (tvTrebleValue == null) {
        break missingId;
      }

      id = R.id.tv_volume_value;
      AppCompatTextView tvVolumeValue = ViewBindings.findChildViewById(rootView, id);
      if (tvVolumeValue == null) {
        break missingId;
      }

      id = R.id.txt_timeZone;
      AppCompatTextView txtTimeZone = ViewBindings.findChildViewById(rootView, id);
      if (txtTimeZone == null) {
        break missingId;
      }

      return new CtDeviceSettingsBinding((CoordinatorLayout) rootView, appbarLayout,
          audioProgressBar, btnEditSpeakerName, btnForgetNetwork, chromecastLoginProgressBar,
          flChromecastSettings, hostFirmwareProgressBar, ivBack, layIssuesReport, layTimeZone,
          llAlexaSettings, llChromecastSettings, llIssuesReport, llSoftUpdate,
          llTopChromecastSettings, llTunnelingControls, localeProgressBar, loginProgressBar,
          seekBarBass, seekBarTreble, seekBarVolume, softUpdateProgressBar, speechVolume,
          switchSpeechVolumeFollow, systemFirmwareProgressBar, toolbar, tvAlexaLocale,
          tvAmazonLogin, tvAudioOutput, tvBassValue, tvChromecastStatus, tvDeviceName,
          tvHostFirmware, tvIpAddress, tvMacAddress, tvSoftUpdate, tvSwitchStatus, tvSystemFirmware,
          tvToolbarTitle, tvTrebleValue, tvVolumeValue, txtTimeZone);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
